const g={id:"id",children:"children",pid:"pid"},y={children:"children",label:"name",value:"id",isLeaf:"leaf",emitPath:!1},h=n=>Object.assign({},g,n),A=(n,t={})=>{t=h(t);const{children:i}=t,r=[...n];for(let e=0;e<r.length;e++)r[e][i]&&r.splice(e+1,0,...r[e][i]);return r},v=(n,t,i={})=>{i=h(i);const r=[],e=[...n],o=new Set,{children:a}=i;for(;e.length;){const s=e[0];if(o.has(s))r.pop(),e.shift();else if(o.add(s),s[a]&&e.unshift(...s[a]),r.push(s),t(s))return r}return null},b=(n,t,i={})=>{const r=(i=h(i)).children;return function e(o){return o.map(a=>({...a})).filter(a=>(a[r]=a[r]&&e(a[r]),t(a)||a[r]&&a[r].length))}(n)},w=(n,t)=>n.map(i=>p(i,t)),p=(n,{children:t="children",conversion:i})=>{const r=Array.isArray(n[t])&&n[t].length>0,e=i(n)||{};return r?{...e,[t]:n[t].map(o=>p(o,{children:t,conversion:i}))}:{...e}},m=(n,t,i={})=>{n.forEach(r=>{const e=t(r,i)||r;r.children&&m(r.children,t,e)})},O=(n,t,i,r)=>{if(!Array.isArray(n))return console.warn("data must be an array"),[];const e=t||"id",o=i||"parentId",a="children",s={},l={},f=[];for(const c of n){const d=c[o];s[d]==null&&(s[d]=[]),l[c[e]]=c,s[d].push(c)}for(const c of n)l[c[o]]==null&&f.push(c);for(const c of f)u(c);function u(c){if(s[c[e]]!==null&&(c[a]=s[c[e]]),c[a])for(const d of c[a])u(d)}return f},S=(n,t,i,r,e)=>{t=t||"id",i=i||"parentId",e=e||Math.min(...n.map(s=>s[i]))||0;const o=JSON.parse(JSON.stringify(n)),a=o.filter(s=>{const l=o.filter(f=>s[t]===f[i]);return l.length>0&&(s.children=l),s[i]===e});return a!==""?a:n},$=(n,t)=>{if(n===void 0||!Array.isArray(n)||n.length===0)return console.warn("tree must be an array"),"";const i=n.find(o=>o.id===t);if(i!==void 0)return i.name;let r="";function e(o){if(o===void 0||!Array.isArray(o)||o.length===0)return!1;for(const a of o){if(a.id===t)return r+=` / ${a.name}`,!0;if(a.children!==void 0&&a.children.length!==0&&(r+=` / ${a.name}`,e(a.children)))return!0}return!1}for(const o of n)if(r=`${o.name}`,e(o.children))break;return r};export{S as a,w as b,v as c,y as d,m as e,b as f,A as g,O as h,$ as t};
