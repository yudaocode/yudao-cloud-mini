const d=(e,t,i)=>{const c=new Blob([e],{type:i});window.URL=window.URL||window.webkitURL;const a=URL.createObjectURL(c),n=document.createElement("a");n.href=a,n.download=t,n.click(),window.URL.revokeObjectURL(a)},r={excel:(e,t)=>{d(e,t,"application/vnd.ms-excel")},word:(e,t)=>{d(e,t,"application/msword")},zip:(e,t)=>{d(e,t,"application/zip")},html:(e,t)=>{d(e,t,"text/html")},markdown:(e,t)=>{d(e,t,"text/markdown")},json:(e,t)=>{d(e,t,"application/json")},image:({url:e,canvasWidth:t,canvasHeight:i,drawWithImageSize:c=!0})=>{const a=new Image;a.src=e,a.onload=()=>{const n=document.createElement("canvas");n.width=t||a.width,n.height=i||a.height;const o=n.getContext("2d");o==null||o.clearRect(0,0,n.width,n.height),c?o.drawImage(a,0,0,a.width,a.height):o.drawImage(a,0,0);const w=n.toDataURL("image/png"),l=document.createElement("a");l.href=w,l.download="image.png",l.click()}},base64ToFile:(e,t)=>{const i=e.split(","),c=i[0].match(/:(.*?);/)[1],a=c.split("/")[1],n=window.atob(i[1]);let o=n.length;const w=new Uint8Array(o);for(;o--;)w[o]=n.charCodeAt(o);return new File([w],`${t}.${a}`,{type:c})}};export{r as d};
